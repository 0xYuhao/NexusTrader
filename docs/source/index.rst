Welcome to TradeBot's documentation!
=========================================

Contact
-------

.. |twitter| image:: https://img.shields.io/badge/X-000000?style=for-the-badge&logo=x&logoColor=white
   :target: https://x.com/quantweb3_ai

.. |discord| image:: https://img.shields.io/badge/Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white
   :target: https://discord.gg/BR8VGRrXFr

.. |telegram| image:: https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white
   :target: https://t.me/+6e2MtXxoibM2Yzlk

|twitter| Stay updated with our latest news, features, and announcements.

|discord| Join our community to discuss ideas, get support, and connect with other users.

|telegram| Receive instant updates and engage in real-time discussions.

Overview
----------

TradeBot is a professional-grade open-source quantitative trading platform, specifically designed for large capital
management and complex strategy development, dedicated to providing high-performance, scalable, and user-friendly
quantitative trading solutions.

Key Features
--------------

- ‚ú® **Multi-Exchange Support**: Seamless integration with leading cryptocurrency exchanges including Binance, Bybit, and OKX, with an extensible design to support additional exchanges effortlessly. 
- ‚ö° **Asynchronous Operations**: Built with `asyncio` to enable highly efficient and scalable asynchronous operations, ensuring optimal performance even during high-frequency trading. 
- üìà **Real-Time Data Streaming**: Robust WebSocket support for real-time market data, order book updates, and trade execution notifications. 
- üìä **Advanced Order Management**: Supports a wide range of order types including limit orders, market orders, and stop orders, with professional-grade order execution optimization. 
- üìã **Comprehensive Account Management**: Track balances, positions, and PnL across multiple exchanges in real-time with integrated account monitoring tools. 
- üõ†Ô∏è **Modular and Extensible Architecture**: A highly flexible framework that allows users to easily add new exchanges, trading instruments, or custom strategy modules. 
- üîÑ **Strategy Execution and Backtesting**: Native support for implementing and backtesting trading strategies, ensuring a smooth transition from testing to live trading. 
- üìàüìâ **High Scalability**: Designed for large-scale, multi-market tracking and execution, ideal for both retail and institutional traders. 
- üí∞ **Risk and Fund Management**: Integrated tools for managing risk exposure and capital allocation to maximize trading efficiency. 
- üîî **Real-Time Notifications**: Stay informed with built-in notifications for trade executions, market conditions, and custom alerts. 

Why TradeBot Is Faster?
-------------------------

- We utilize [uvloop](https://github.com/MagicStack/uvloop) to enhance the event loop's performance, achieving speeds
  that are 2-4 times faster than the default event loop.
- We employ [picows](https://github.com/tarasko/picows), a Cython-based WebSocket framework, which can match the
  performance of C++'s Boost.Beast. Other Python frameworks, such as ``websockets`` and ``aiohttp``, are comparatively
  slower.
- We leverage ``msgspec`` for data serialization and deserialization, which outperforms alternatives like ``orjson``,
  ``ujson``, and ``json``. All data classes are defined as ``msgspec.Struct``, which is more efficient than traditional
  ``dataclass``.
- All orders are managed using ``asyncio.Queue``.
- The core components (MessageBus, Clock, etc.) are implemented in Rust, with the Python code generated by
  the [nautilius](https://github.com/nautilius/nautilius) framework.

Comparison with Other Frameworks
----------------------------------
The speed of websocket connection mainly depends on the performance of json decoder and websocket package. Among them, mesgepc is the best performing json decoder, even faster than orjson. picows is the best performing websocket package in Python.
.. include:: ./comparison.md
   :parser: myst_parser.sphinx_

Getting Started
------------------

Check out the :doc:`quickstart` guide to get started with TradeBot.

API Reference
----------------

For detailed API documentation, see the :doc:`api/index` section.

Contents
----------

.. toctree::
   :maxdepth: 2

   installation
   quickstart
   concepts/index
   exchange/index
   api/index

Indices and tables
=====================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search` 
