Welcome to TradeBot's documentation!
=========================================

Contact
-------

.. |twitter| image:: https://img.shields.io/badge/X-000000?style=for-the-badge&logo=x&logoColor=white
   :target: https://x.com/quantweb3_ai

.. |discord| image:: https://img.shields.io/badge/Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white
   :target: https://discord.gg/BR8VGRrXFr

.. |telegram| image:: https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white
   :target: https://t.me/+6e2MtXxoibM2Yzlk

|twitter| Stay updated with our latest news, features, and announcements.

|discord| Join our community to discuss ideas, get support, and connect with other users.

|telegram| Receive instant updates and engage in real-time discussions.

Overview
----------

TradeBot is a professional-grade open-source quantitative trading platform, specifically designed for large capital
management and complex strategy development, dedicated to providing high-performance, scalable, and user-friendly
quantitative trading solutions.

Key Features
--------------

- ‚ú® **Multi-Exchange Support**: Seamless integration with leading cryptocurrency exchanges including Binance, Bybit, and OKX, with an extensible design to support additional exchanges effortlessly. 
- ‚ö° **Asynchronous Operations**: Built with `asyncio` to enable highly efficient and scalable asynchronous operations, ensuring optimal performance even during high-frequency trading. 
- üìà **Real-Time Data Streaming**: Robust WebSocket support for real-time market data, order book updates, and trade execution notifications. 
- üìä **Advanced Order Management**: Supports a wide range of order types including limit orders, market orders, and stop orders, with professional-grade order execution optimization. 
- üìã **Comprehensive Account Management**: Track balances, positions, and PnL across multiple exchanges in real-time with integrated account monitoring tools. 
- üõ†Ô∏è **Modular and Extensible Architecture**: A highly flexible framework that allows users to easily add new exchanges, trading instruments, or custom strategy modules. 
- üîÑ **Strategy Execution and Backtesting**: Native support for implementing and backtesting trading strategies, ensuring a smooth transition from testing to live trading. 
- üìàüìâ **High Scalability**: Designed for large-scale, multi-market tracking and execution, ideal for both retail and institutional traders. 
- üí∞ **Risk and Fund Management**: Integrated tools for managing risk exposure and capital allocation to maximize trading efficiency. 
- üîî **Real-Time Notifications**: Stay informed with built-in notifications for trade executions, market conditions, and custom alerts. 

Why TradeBot Is Faster?
-------------------------

- We utilize [uvloop](https://github.com/MagicStack/uvloop) to enhance the event loop's performance, achieving speeds
  that are 2-4 times faster than the default event loop.
- We employ [picows](https://github.com/tarasko/picows), a Cython-based WebSocket framework, which can match the
  performance of C++'s Boost.Beast. Other Python frameworks, such as ``websockets`` and ``aiohttp``, are comparatively
  slower.
- We leverage ``msgspec`` for data serialization and deserialization, which outperforms alternatives like ``orjson``,
  ``ujson``, and ``json``. All data classes are defined as ``msgspec.Struct``, which is more efficient than traditional
  ``dataclass``.
- All orders are managed using ``asyncio.Queue``.
- The core components (MessageBus, Clock, etc.) are implemented in Rust, with the Python code generated by
  the [nautilius](https://github.com/nautilius/nautilius) framework.

Comparison with Other Frameworks
----------------------------------

| Framework                                                                                                       | Websocket Package                                                                   | Data Serialization                                 | Strategy Support |
|-----------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|----------------------------------------------------|------------------|
| TradeBotPro                                                                                                     | [picows](https://picows.readthedocs.io/en/stable/introduction.html#installation)    | [msgspec](https://jcristharif.com/msgspec/)        | ‚úÖ                |
| [HummingBot](https://github.com/hummingbot/hummingbot?tab=readme-ov-file)                                       | aiohttp                                                                             | [ujson](https://pypi.org/project/ujson/)           | ‚úÖ                |
| [Freqtrade](https://github.com/freqtrade/freqtrade)                                                             | websockets                                                                          | [orjson](https://github.com/ijl/orjson)            | ‚úÖ                |
| [crypto-feed](https://github.com/bmoscon/cryptofeed)                                                            | [websockets](https://websockets.readthedocs.io/en/stable/)                          | [yapic.json](https://pypi.org/project/yapic.json/) | ‚ùå                |
| [ccxt](https://github.com/bmoscon/cryptofeed)                                                                   | [aiohttp](https://docs.aiohttp.org/en/stable/client_reference.html)                 | json                                               | ‚ùå                |
| [binance-futures-connector](https://github.com/binance/binance-futures-connector-python)                        | [websocket-client](https://websocket-client.readthedocs.io/en/latest/examples.html) | json                                               | ‚ùå                |
| [python-okx](https://github.com/okxapi/python-okx)                                                              | websockets                                                                          | json                                               | ‚ùå                |
| [unicorn-binance-websocket-api](https://github.com/LUCIT-Systems-and-Development/unicorn-binance-websocket-api) | websockets                                                                          | [ujson](https://pypi.org/project/ujson/)           | ‚ùå                |

Getting Started
------------------

Check out the :doc:`quickstart` guide to get started with TradeBot.

API Reference
----------------

For detailed API documentation, see the :doc:`api/index` section.

Contents
----------

.. toctree::
   :maxdepth: 2

   installation
   quickstart
   concepts/index
   exchange/index
   api/index

Indices and tables
=====================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search` 
